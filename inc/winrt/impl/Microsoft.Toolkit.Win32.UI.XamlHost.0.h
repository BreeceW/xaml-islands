// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.221104.6

#pragma once
#ifndef WINRT_Microsoft_Toolkit_Win32_UI_XamlHost_0_H
#define WINRT_Microsoft_Toolkit_Win32_UI_XamlHost_0_H
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct IClosable;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename T> struct WINRT_IMPL_EMPTY_BASES IVector;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Markup
{
    struct IXamlMetadataProvider;
}
WINRT_EXPORT namespace winrt::Microsoft::Toolkit::Win32::UI::XamlHost
{
    struct IXamlApplication;
    struct IXamlApplicationFactory;
    struct XamlApplication;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplication>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplicationFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Toolkit::Win32::UI::XamlHost::XamlApplication>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Toolkit::Win32::UI::XamlHost::XamlApplication> = L"Microsoft.Toolkit.Win32.UI.XamlHost.XamlApplication";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplication> = L"Microsoft.Toolkit.Win32.UI.XamlHost.IXamlApplication";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplicationFactory> = L"Microsoft.Toolkit.Win32.UI.XamlHost.IXamlApplicationFactory";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplication>{ 0x64045A68,0xD225,0x5BAF,{ 0x9D,0x7A,0xA7,0x77,0x15,0xEF,0xA8,0xC9 } }; // 64045A68-D225-5BAF-9D7A-A77715EFA8C9
    template <> inline constexpr guid guid_v<winrt::Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplicationFactory>{ 0x44EDA07B,0x438E,0x549C,{ 0xB5,0x46,0xEE,0x7A,0x72,0x3E,0x89,0x31 } }; // 44EDA07B-438E-549C-B546-EE7A723E8931
    template <> struct default_interface<winrt::Microsoft::Toolkit::Win32::UI::XamlHost::XamlApplication>{ using type = winrt::Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplication; };
    template <> struct abi<winrt::Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplication>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall Initialize() noexcept = 0;
            virtual int32_t __stdcall get_WindowsXamlManager(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsDisposed(bool*) noexcept = 0;
            virtual int32_t __stdcall get_MetadataProviders(void**) noexcept = 0;
            virtual int32_t __stdcall Run() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplicationFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void*, void**, void**) noexcept = 0;
            virtual int32_t __stdcall CreateInstance2(void*, void**, void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Win32_UI_XamlHost_IXamlApplication
    {
        auto Initialize() const;
        [[nodiscard]] auto WindowsXamlManager() const;
        [[nodiscard]] auto IsDisposed() const;
        [[nodiscard]] auto MetadataProviders() const;
        auto Run() const;
    };
    template <> struct consume<winrt::Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplication>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Win32_UI_XamlHost_IXamlApplication<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Win32_UI_XamlHost_IXamlApplicationFactory
    {
        auto CreateInstance(param::vector<winrt::Windows::UI::Xaml::Markup::IXamlMetadataProvider> const& providers, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
        auto CreateInstance2(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplicationFactory>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Win32_UI_XamlHost_IXamlApplicationFactory<D>;
    };
}
#endif
