// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.190730.2

#ifndef WINRT_Microsoft_Toolkit_Win32_UI_XamlHost_H
#define WINRT_Microsoft_Toolkit_Win32_UI_XamlHost_H
#include "winrt/base.h"

#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Windows.UI.Xaml.2.h"
#include "winrt/impl/Windows.UI.Xaml.Markup.2.h"
#include "winrt/impl/Microsoft.Toolkit.Win32.UI.XamlHost.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Toolkit_Win32_UI_XamlHost_IXamlApplication<D>::Initialize() const
    {
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplication)->Initialize());
    }
    template <typename D> auto consume_Microsoft_Toolkit_Win32_UI_XamlHost_IXamlApplication<D>::WindowsXamlManager() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplication)->get_WindowsXamlManager(&value));
        return Windows::Foundation::IClosable{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Toolkit_Win32_UI_XamlHost_IXamlApplication<D>::IsDisposed() const
    {
        bool value;
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplication)->get_IsDisposed(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Toolkit_Win32_UI_XamlHost_IXamlApplication<D>::MetadataProviders() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplication)->get_MetadataProviders(&value));
        return Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Markup::IXamlMetadataProvider>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Toolkit_Win32_UI_XamlHost_IXamlApplication<D>::Run() const
    {
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplication)->Run());
    }
    template <typename D> auto consume_Microsoft_Toolkit_Win32_UI_XamlHost_IXamlApplicationFactory<D>::CreateInstance(param::vector<Windows::UI::Xaml::Markup::IXamlMetadataProvider> const& providers, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplicationFactory)->CreateInstance(*(void**)(&providers), *(void**)(&baseInterface), impl::bind_out(innerInterface), &value));
        return Microsoft::Toolkit::Win32::UI::XamlHost::XamlApplication{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Toolkit_Win32_UI_XamlHost_IXamlApplicationFactory<D>::CreateInstance2(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplicationFactory)->CreateInstance2(*(void**)(&baseInterface), impl::bind_out(innerInterface), &value));
        return Microsoft::Toolkit::Win32::UI::XamlHost::XamlApplication{ value, take_ownership_from_abi };
    }
    
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplication> : produce_base<D, Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplication>
    {
        int32_t __stdcall Initialize() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Initialize();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_WindowsXamlManager(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::IClosable>(this->shim().WindowsXamlManager());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsDisposed(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsDisposed());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MetadataProviders(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Markup::IXamlMetadataProvider>>(this->shim().MetadataProviders());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Run() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Run();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplicationFactory> : produce_base<D, Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplicationFactory>
    {
        int32_t __stdcall CreateInstance(void* providers, void* baseInterface, void** innerInterface, void** value) noexcept final try
        {
            if (innerInterface) *innerInterface = nullptr;
            Windows::Foundation::IInspectable winrt_impl_innerInterface;
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Win32::UI::XamlHost::XamlApplication>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Markup::IXamlMetadataProvider> const*>(&providers), *reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), winrt_impl_innerInterface));
                if (innerInterface) *innerInterface = detach_abi(winrt_impl_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateInstance2(void* baseInterface, void** innerInterface, void** value) noexcept final try
        {
            if (innerInterface) *innerInterface = nullptr;
            Windows::Foundation::IInspectable winrt_impl_innerInterface;
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Win32::UI::XamlHost::XamlApplication>(this->shim().CreateInstance2(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), winrt_impl_innerInterface));
                if (innerInterface) *innerInterface = detach_abi(winrt_impl_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
namespace winrt::Microsoft::Toolkit::Win32::UI::XamlHost
{
    //inline XamlApplication::XamlApplication(param::vector<Windows::UI::Xaml::Markup::IXamlMetadataProvider> const& providers)
    //{
    //    Windows::Foundation::IInspectable baseInterface, innerInterface;
    //    *this = impl::call_factory<XamlApplication, Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplicationFactory>([&](auto&& f) { return f.CreateInstance(providers, baseInterface, innerInterface); });
    //}
    //inline XamlApplication::XamlApplication()
    //{
    //    Windows::Foundation::IInspectable baseInterface, innerInterface;
    //    *this = impl::call_factory<XamlApplication, Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplicationFactory>([&](auto&& f) { return f.CreateInstance2(baseInterface, innerInterface); });
    //}

    template <typename D, typename... Interfaces>
    struct XamlApplicationT :
        implements<D, Windows::UI::Xaml::IApplicationOverrides, Windows::UI::Xaml::IApplicationOverrides2, composing, Interfaces...>,
        impl::require<D, Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplication, Windows::Foundation::IClosable, Windows::UI::Xaml::IApplication, Windows::UI::Xaml::IApplication2, Windows::UI::Xaml::IApplication3>,
        impl::base<D, XamlApplication, Windows::UI::Xaml::Application>,
        Windows::UI::Xaml::IApplicationOverridesT<D>, Windows::UI::Xaml::IApplicationOverrides2T<D>
    {
        using composable = XamlApplication;
    protected:
        XamlApplicationT(param::vector<Windows::UI::Xaml::Markup::IXamlMetadataProvider> const& providers)
        {
            impl::call_factory<XamlApplication, Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplicationFactory>([&](auto&& f) { f.CreateInstance(providers, *this, this->m_inner); });
        }
        XamlApplicationT()
        {
            impl::call_factory<XamlApplication, Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplicationFactory>([&](auto&& f) { f.CreateInstance2(*this, this->m_inner); });
        }
    };
}
namespace std
{
    template<> struct hash<winrt::Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplication> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Toolkit::Win32::UI::XamlHost::IXamlApplicationFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Toolkit::Win32::UI::XamlHost::XamlApplication> : winrt::impl::hash_base {};
}
#endif
